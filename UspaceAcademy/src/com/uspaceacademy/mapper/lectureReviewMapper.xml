<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="lectureReviewMapper">
	<!--  parameterType : 가져올값
			resultType :  리턴타입
	 -->
	 
	 
	 <!--  오류났던거 적기 :  이거 resultMap 꼭 해주기!! 안그럼 vo에서 set으로 된 이름 찾으려고해서 안됨,    조인하는거 아니더라도 해야함!!! -->
	 <resultMap type="LectureReview" id="lectureReview-basic">
 		<id column="review_no" property="reviewNo"/>
		<result column="review_writer" property="reviewWriter"/>
		<result column="lecture_title" property="lectureTitle"/>
		<result column="lecture_subject" property="lectureSubject"/>
		<result column="review_title" property="reviewTitle"/>
		<result column="review_content" property="reviewContent"/>
		<result column="review_date" property="reviewDate"/>
		<result column="review_hit" property="reviewHit"/>
 	</resultMap>
	 
	 
	 
	 
	 <sql id="lecture-review-columns">
	 review_no, review_writer, lecture_title, lecture_subject, review_title, review_content, review_date, review_hit
	 </sql>
	 
	 
	 
	 
	 
	 

<!-- ************************************************************************************************************************************************ -->





	<!-- 1.삽입 -->
	<insert id="insert" parameterType="LectureReview"><!--  mybatis-config에 타입알리야스 지정 -->
	INSERT INTO review_board VALUES (#{reviewNo},#{reviewWriter},#{lectureTitle},#{lectureSubject},#{reviewTitle},#{reviewContent},#{reviewDate},#{reviewHit})   <!-- VO값넣기 -->                          
	</insert>
	








	<!--  2.시퀀스 -->
	<select id="selectNextNo" resultType="_int">
	select review_board_seq.nextval from dual
	</select>
	
	
	
	
	
	
	
	<!--  3.전체조회 (이건 - 그냥 전체조회할때) -->
	<select id="select" resultType="LectureReview">
	SELECT 	review_no reviewNo,
				review_writer reviewWriter,
				lecture_title lectureTitle,
				lecture_subject lectureSubject,
				review_title reviewTitle,
				review_content reviewContent,
				review_date reviewDate,
				review_hit reviewHit   
	FROM 	review_board
	</select>
	
	
	
	
	
	
	
	
	<!-- 4.수정 -->
	<update id="update" parameterType="LectureReview">
	UPDATE review_board
	SET  	    review_writer=#{reviewWriter}, 
			    lecture_title=#{lectureTitle},
			    lecture_subject=#{lectureSubject}, 
			    review_title=#{reviewTitle}, 
			    review_content=#{reviewContent}  
			   <!--  review_date=#{reviewDate},  -->
			    <!-- review_hit=#{reviewHit}  --><!--  끝에 점 찍으면 안됨 -->
	WHERE  	review_no=#{reviewNo}   <!--    쿼리이름 => VO이름    -->
	</update>
	
	
	
	
	
	
	
	<!-- 5.삭제 -->
	<delete id="deleteByNo" parameterType="_int">
	DELETE FROM review_board WHERE review_no=#{reviewNo}   <!--    쿼리이름 => VO이름    -->
	</delete>
	
	
	

	
	
	
	<!--  6.전체조회(no로) (이건 - 세부조회할때) -->
	<select id="selectNo" parameterType="_int" resultType="LectureReview" >
	SELECT 	review_no reviewNo,
				review_writer reviewWriter,
				lecture_title lectureTitle,
				lecture_subject lectureSubject,
				review_title reviewTitle,
				review_content reviewContent,
				review_date reviewDate,
				review_hit reviewHit      
	FROM 	review_board
	WHERE    review_no=#{reviewNo}<!--    쿼리이름!! => VO이름!!    -->
	</select>
	
	
	
	
	
	
	<!-- 7.조회수 처리  -->
	<select id="updateHit" parameterType="LectureReview" > <!--  _int -->
	UPDATE  review_board
		SET    review_hit=#{reviewHit}
	WHERE   review_no=#{reviewNo} <!--  review_board테이블에 있는 hit값을 ?로 바꿈 -> ex)no가 7인 게시물의 hits를 바꾼다 -->
	</select>
	
	



	<!-- 아래 페이징처리............................................................................................................................ -->

	<!--    8.   select 페이징 처리!!    -->
	<select id="selectPaging" parameterType="map" resultMap="lectureReview-basic">
	SELECT <include refid="lecture-review-columns"/>
	FROM(SELECT CEIL (rownum/#{itemsPerPage}) page, <include refid="lecture-review-columns"/>
	FROM(SELECT <include refid="lecture-review-columns"/>
			FROM review_board      order by review_no desc
		)
	)
	WHERE page=#{page}
	</select>
	
	<!--   9.페이징처리에 필요함 (이건 - 수강후기 전체 리스트 (갯수) 세어줌 )   -->
	<select id="selectCount" resultType="_int" >
	SELECT  count(review_no)
	FROM    review_board
	</select>


	<!-- 위에 페이징처리............................................................................................................................ -->



	
	
	
<!-- 아래 검색처리************************************************************************************************************************************************ -->
	<!--  강의과목으로 검색 lectureSubject / 강의리스트페이징-->
	<!--  강의과목으로 검색 lectureSubject / 강의리스트페이징헬퍼 -->
	<!--  내용으로 검색 reviewContent / 강의리스트페이징-->
	<!--  내용으로 검색 reviewContent / 강의리스트페이징헬퍼 -->
	
	
	
	
	<!--  10.강의과목으로 검색 lectureSubject / 강의리스트페이징-->
			<select id="selectPagingLectureSubject" parameterType="map" resultMap="lectureReview-basic">
			SELECT <include refid="lecture-review-columns"/>
			FROM(
				SELECT ceil(rownum/#{itemsPerPage}) page, <include refid="lecture-review-columns"/>
				FROM(
						SELECT <include refid="lecture-review-columns"/>
						FROM  review_board
						WHERE  lecture_subject like '%'||#{lectureSubject}||'%'
						ORDER BY review_no DESC
						)
					)	
			WHERE page=#{page}
			</select>
			
	<!--  11.강의과목으로 검색 lectureSubject / 강의리스트페이징헬퍼 -->
			<select id="selectCountLectureSubject" resultType="_int" >
				SELECT count(review_no)
				FROM review_board
				WHERE lecture_subject like '%'||#{lectureSubject}||'%'
				</select>			
			
			<!-- ***************************************************************************************************** -->
			
	<!--  12.제목으로 검색 reviewContent / 강의리스트페이징-->
			<select id="selectPagingReviewTitle" parameterType="map" resultMap="lectureReview-basic">
			SELECT <include refid="lecture-review-columns"/>
			FROM(
				SELECT ceil(rownum/#{itemsPerPage}) page, <include refid="lecture-review-columns"/>
				FROM(
						SELECT <include refid="lecture-review-columns"/>
						FROM review_board
						WHERE review_title like '%'||#{reviewTitle}||'%'
						ORDER BY review_no DESC
						)
					)	
			WHERE page=#{page}
			</select>
			
			
	<!--  13.제목으로 검색 reviewTitle / 강의리스트페이징헬퍼 -->
			<select id="selectCountReviewTitle" resultType="_int" >
			SELECT count(review_no)
				FROM review_board
				WHERE review_title like '%'||#{reviewTitle}||'%'
				</select>		
			
			
			
<!-- 위에 검색처리************************************************************************************************************************************************ -->	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	<!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx************************************************************************************************************************************************ -->
	<!--  전체조회(제목+내용) 
	<select id="selectTitleContent" resultType="LectureReview" parameterType="string">
	SELECT 	review_no reviewNo,
				review_writer reviewWriter,
				lecture_title lectureTitle,
				lecture_subject lectureSubject,
				review_title reviewTitle,
				review_content reviewContent,
				review_date reviewDate,
				review_hit reviewHit   
	FROM 	review_board
	WHERE lecture_title=#{lectureTitle} , review_content=#{reviewContent}      쿼리 => VO
	</select>
	

	
	 전체조회(제목)
	<select id="selectTitle" resultType="LectureReview" parameterType="string">
	SELECT 	review_no reviewNo,
				review_writer reviewWriter,
				lecture_title lectureTitle,
				lecture_subject lectureSubject,
				review_title reviewTitle,
				review_content reviewContent,
				review_date reviewDate,
				review_hit reviewHit   
	FROM 	review_board
	WHERE lecture_title=#{lectureTitle}    쿼리 => VO
	</select>
	

	
	 전체조회(내용)
	<select id="selectContent" resultType="LectureReview" parameterType="string">
	SELECT 	review_no reviewNo,
				review_writer reviewWriter,
				lecture_title lectureTitle,
				lecture_subject lectureSubject,
				review_title reviewTitle,
				review_content reviewContent,
				review_date reviewDate,
				review_hit reviewHit   
	FROM 	review_board
	WHERE review_content=#{reviewContent}  쿼리 => VO
	</select>
	 -->
</mapper>